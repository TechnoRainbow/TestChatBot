"""
База знаний с использованием FAISS для инвестиционного помощника
Содержит общую информацию об инвестиционных продуктах
"""

import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
from typing import List, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


class InvestmentKnowledgeBase:
    """
    Векторная база знаний с FAISS для поиска по эмбеддингам
    Использует модель sentence-transformers для векторизации
    """
    
    def __init__(self):
        # Загружаем русскоязычную модель для эмбеддингов
        self.model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
        
        # Подготавливаем базу знаний об инвестициях
        self.documents = [
            # Общая информация об инвестициях
            "Управляющие компании специализируются на управлении паевыми инвестиционными фондами и предоставляют услуги доверительного управления.",
            
            # Информация об инвестиционных паях
            "Инвестиционный пай — это именная ценная бумага, подтверждающая долю пайщика в имуществе паевого инвестиционного фонда и право требовать от управляющей компании надлежащего доверительного управления имуществом фонда.",
            
            "Пай подтверждает право пайщика на долю в имуществе фонда, право на доверительное управление, выплату денежной компенсации при погашении паев и участие в общем собрании пайщиков.",
            
            "Учёт прав на паи ведётся в реестре владельцев инвестиционных паев. Данные о правах подтверждаются выпиской из реестра.",
            
            # ЗПИФ информация
            "Закрытый паевой инвестиционный фонд (ЗПИФ) — это фонд, паи которого размещаются только среди определенного круга лиц и не подлежат погашению до прекращения фонда.",
            
            "ЗПИФ недвижимости инвестирует средства в объекты недвижимости: офисные здания, торговые центры, складские комплексы, жилую недвижимость.",
            
            "Паи ЗПИФ можно продать на вторичном рынке через брокера или по договору купли-продажи. Рыночная цена устанавливается участниками торгов.",
            
            # Тестирование инвесторов
            "Перед покупкой паев фондов, не предназначенных для квалифицированных инвесторов, требуется пройти тестирование на понимание продукта.",
            
            "Тест состоит из семи вопросов и доступен в личном кабинете или у брокера перед покупкой. Пересдавать тест можно неограниченное количество раз.",
            
            "Тестирование направлено на оценку понимания инвестором рисков и особенностей инвестиционного продукта.",
            
            # Риски и доходность
            "Стоимость инвестиционных паев может увеличиваться и уменьшаться. Результаты инвестирования в прошлом не определяют доходы в будущем.",
            
            "Основные риски инвестирования в ЗПИФ: рыночный риск, риск ликвидности, операционный риск, риск контрагента.",
            
            # Погашение и возврат средств
            "Возврат денежных средств из ЗПИФ возможен только при прекращении фонда или продаже паев на вторичном рынке.",
            
            "Для квалифицированных инвесторов паи можно продать через брокера. Для неквалифицированных — через договор купли-продажи или брокера.",
            
            # Дивиденды и выплаты
            "Доходы от управления имуществом ЗПИФ могут направляться на выплату дохода пайщикам или реинвестироваться в активы фонда.",
            
            "Периодичность и размер выплат определяются правилами доверительного управления паевым инвестиционным фондом.",
        ]
        
        # Создаем эмбеддинги для всех документов
        logger.info("Создание эмбеддингов для базы знаний...")
        embeddings = self.model.encode(self.documents)
        
        # Инициализируем FAISS индекс
        dimension = embeddings.shape[1]
        self.index = faiss.IndexFlatIP(dimension)  # Inner Product для косинусного сходства
        
        # Нормализуем эмбеддинги для корректного косинусного поиска
        faiss.normalize_L2(embeddings)
        self.index.add(embeddings.astype('float32'))
        
        logger.info(f"База знаний инициализирована: {len(self.documents)} документов, размерность {dimension}")
    
    def search(self, query: str, top_k: int = 3) -> Optional[str]:
        """
        Поиск наиболее релевантных документов по запросу
        
        Args:
            query: Поисковый запрос пользователя
            top_k: Количество документов для возврата
            
        Returns:
            Объединенный текст найденных документов или None
        """
        if not query or not query.strip():
            return None
        
        try:
            # Создаем эмбеддинг для запроса
            query_embedding = self.model.encode([query.strip()])
            faiss.normalize_L2(query_embedding)
            
            # Ищем ближайшие документы
            scores, indices = self.index.search(query_embedding.astype('float32'), top_k)
            
            # Фильтруем результаты по минимальному порогу схожести
            min_similarity = 0.3  # Можно настроить
            relevant_docs = []
            
            for score, idx in zip(scores[0], indices[0]):
                if score >= min_similarity and idx < len(self.documents):
                    relevant_docs.append(self.documents[idx])
            
            if relevant_docs:
                context = "\n\n".join(relevant_docs)
                logger.info(f"Найдено {len(relevant_docs)} релевантных документов для запроса")
                return context
            else:
                logger.warning("Не найдено релевантных документов для запроса")
                return None
                
        except Exception as e:
            logger.error(f"Ошибка при поиске в базе знаний: {e}")
            return None
    
    def get_stats(self) -> dict:
        """Возвращает статистику базы знаний"""
        return {
            "total_documents": len(self.documents),
            "index_size": self.index.ntotal,
            "embedding_dimension": self.index.d
        }


# Глобальный экземпляр базы знаний
knowledge_base = InvestmentKnowledgeBase() 