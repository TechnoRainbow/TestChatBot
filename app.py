"""
RAG —á–∞—Ç-–±–æ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π FAISS –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import logging
import time
from typing import Optional

from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel, Field, validator

from llm_client import llm_client, LLMAPIError
from knowledge_base import knowledge_base
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Investment RAG –ß–∞—Ç-–±–æ—Ç",
    description="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º",
    version="1.0.0"
)


class ChatRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –∫ —á–∞—Ç-–±–æ—Ç—É"""
    query: str = Field(..., min_length=1, max_length=1000, description="–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    @validator('query')
    def validate_query(cls, v):
        if not v or not v.strip():
            raise ValueError('–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return v.strip()


class ChatResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç-–±–æ—Ç–∞"""
    response: str = Field(..., description="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")
    context_found: bool = Field(..., description="–ù–∞–π–¥–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    processing_time: Optional[float] = Field(None, description="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")


@app.get("/", response_class=HTMLResponse)
async def get_main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —á–∞—Ç-–±–æ—Ç–∞"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                max-width: 900px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            
            .container {
                background: white;
                border-radius: 15px;
                padding: 30px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            
            .header {
                text-align: center;
                margin-bottom: 30px;
                padding-bottom: 20px;
                border-bottom: 2px solid #f0f0f0;
            }
            
            .header h1 {
                color: #2c3e50;
                margin-bottom: 10px;
                font-size: 2.2em;
            }
            
            .header p {
                color: #7f8c8d;
                font-size: 1.1em;
            }
            
            .chat-container {
                height: 450px;
                border: 2px solid #ecf0f1;
                border-radius: 10px;
                padding: 20px;
                margin-bottom: 20px;
                overflow-y: auto;
                background: #fafbfc;
            }
            
            .message {
                margin: 15px 0;
                padding: 12px 18px;
                border-radius: 10px;
                max-width: 85%;
                word-wrap: break-word;
                line-height: 1.4;
            }
            
            .user-message {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                margin-left: auto;
                text-align: right;
            }
            
            .bot-message {
                background: #ecf0f1;
                color: #2c3e50;
                border-left: 4px solid #3498db;
            }
            
            .input-section {
                display: flex;
                gap: 15px;
                margin-bottom: 20px;
            }
            
            .message-input {
                flex: 1;
                padding: 15px;
                border: 2px solid #ddd;
                border-radius: 8px;
                font-size: 16px;
                transition: border-color 0.3s;
            }
            
            .message-input:focus {
                outline: none;
                border-color: #3498db;
            }
            
            .send-button {
                padding: 15px 25px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                font-weight: 600;
                transition: transform 0.2s;
            }
            
            .send-button:hover:not(:disabled) {
                transform: translateY(-2px);
            }
            
            .send-button:disabled {
                background: #95a5a6;
                cursor: not-allowed;
                transform: none;
            }
            
            .examples {
                background: #f8f9fa;
                border-radius: 10px;
                padding: 20px;
                border: 1px solid #e9ecef;
            }
            
            .examples h3 {
                margin-bottom: 15px;
                color: #2c3e50;
            }
            
            .example-btn {
                display: block;
                width: 100%;
                margin: 8px 0;
                padding: 12px 15px;
                background: white;
                border: 1px solid #ddd;
                border-radius: 6px;
                cursor: pointer;
                text-decoration: none;
                color: #2c3e50;
                transition: all 0.3s;
                text-align: left;
            }
            
            .example-btn:hover {
                background: #3498db;
                color: white;
                border-color: #3498db;
                transform: translateX(5px);
            }
            
            .loading {
                display: none;
                text-align: center;
                color: #7f8c8d;
                font-style: italic;
                margin: 15px 0;
            }
            
            .status {
                text-align: center;
                margin-top: 10px;
                font-size: 12px;
                color: #95a5a6;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</h1>
                <p>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º</p>
            </div>
            
            <div class="chat-container" id="chatContainer">
                <div class="message bot-message">
                    <strong>–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:</strong> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—è—Ö, –ó–ü–ò–§ –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.
                </div>
            </div>
            
            <div class="loading" id="loading">–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...</div>
            
            <div class="input-section">
                <input 
                    type="text" 
                    id="messageInput" 
                    class="message-input" 
                    placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö..."
                    maxlength="1000"
                />
                <button id="sendButton" class="send-button" onclick="sendMessage()">
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
            </div>
            
            <div class="examples">
                <h3>üìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</h3>
                <a href="#" class="example-btn" onclick="askExample('–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–∞–π (–ü–∞–π)?')">
                    üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–∞–π (–ü–∞–π)?
                </a>
                <a href="#" class="example-btn" onclick="askExample('–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –ø–∞–µ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?')">
                    üîπ –ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –ø–∞–µ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?
                </a>
                <a href="#" class="example-btn" onclick="askExample('–í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –ó–ü–ò–§ –¥–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Ñ–æ–Ω–¥–∞?')">
                    üîπ –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –ó–ü–ò–§ –¥–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Ñ–æ–Ω–¥–∞?
                </a>
                <a href="#" class="example-btn" onclick="askExample('–ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —É –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ó–ü–ò–§?')">
                    üîπ –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —É –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ó–ü–ò–§?
                </a>
            </div>
            
            <div class="status">
                RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –±–∞–∑–µ FAISS
            </div>
        </div>

        <script>
            function addMessage(text, isUser = false, hasContext = null) {
                const container = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message ' + (isUser ? 'user-message' : 'bot-message');
                
                let content = text;
                if (!isUser) {
                    content = '<strong>–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:</strong> ' + text;
                    if (hasContext !== null) {
                        const contextIcon = hasContext ? 'üìö' : '‚ùì';
                        content += `<br><small style="opacity: 0.7;">${contextIcon} ${hasContext ? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π'}</small>`;
                    }
                }
                
                messageDiv.innerHTML = content;
                container.appendChild(messageDiv);
                container.scrollTop = container.scrollHeight;
            }
            
            function setLoading(isLoading) {
                const loading = document.getElementById('loading');
                const sendButton = document.getElementById('sendButton');
                const messageInput = document.getElementById('messageInput');
                
                loading.style.display = isLoading ? 'block' : 'none';
                sendButton.disabled = isLoading;
                messageInput.disabled = isLoading;
                sendButton.textContent = isLoading ? '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
            }
            
            async function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                
                if (!message) return;
                
                addMessage(message, true);
                input.value = '';
                setLoading(true);
                
                try {
                    const startTime = Date.now();
                    
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ query: message })
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        const duration = Date.now() - startTime;
                        addMessage(result.response, false, result.context_found);
                        console.log(`–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${duration}–º—Å, –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${result.context_found}`);
                    } else {
                        addMessage(`–û—à–∏–±–∫–∞: ${result.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, false);
                    }
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
                    addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', false);
                } finally {
                    setLoading(false);
                }
            }
            
            function askExample(question) {
                document.getElementById('messageInput').value = question;
                sendMessage();
            }
            
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            document.getElementById('messageInput').focus();
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.post("/chat", response_model=ChatResponse)
async def process_chat_request(request: ChatRequest):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç-–±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º RAG –ø–∞–π–ø–ª–∞–π–Ω–æ–º
    1. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ FAISS
    2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    """
    start_time = time.time()
    
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{request.query[:50]}...'")
        
        # –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        context = knowledge_base.search(request.query, top_k=3)
        context_found = bool(context)
        
        logger.info(f"–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {'–Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç' if context_found else '–∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM
        try:
            response_text = await llm_client.generate_response(
                user_query=request.query,
                context=context
            )
        except LLMAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ LLM API: {e}")
            # Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ LLM
            if context_found:
                response_text = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n\n{context}"
            else:
                response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç."
        
        processing_time = time.time() - start_time
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f}—Å")
        
        return ChatResponse(
            response=response_text,
            context_found=context_found,
            processing_time=round(processing_time, 3)
        )
        
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —á–∞—Ç-–±–æ—Ç–µ: {e}")
        raise HTTPException(
            status_code=500,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@app.get("/health")
async def health_check():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        kb_stats = knowledge_base.get_stats()
        llm_health = await llm_client.health_check()
        
        return {
            "status": "healthy" if llm_health else "degraded",
            "components": {
                "knowledge_base": {
                    "status": "healthy",
                    "documents": kb_stats["total_documents"],
                    "embedding_dimension": kb_stats["embedding_dimension"]
                },
                "llm_client": {
                    "status": "healthy" if llm_health else "error",
                    "model": config.model_name
                }
            },
            "version": "1.0.0"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
        return {
            "status": "error",
            "error": str(e)
        }


@app.get("/stats")
async def get_system_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        kb_stats = knowledge_base.get_stats()
        return {
            "knowledge_base": kb_stats,
            "config": {
                "model": config.model_name,
                "provider": config.llm_provider
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


if __name__ == "__main__":
    import uvicorn
    
    logger.info("–ó–∞–ø—É—Å–∫ RAG —á–∞—Ç-–±–æ—Ç–∞...")
    logger.info(f"LLM –º–æ–¥–µ–ª—å: {config.model_name}")
    logger.info(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {config.llm_provider}")
    
    uvicorn.run(
        app,
        host=config.host,
        port=config.port,
        log_level="info"
    ) 